#!/bin/bash
#
# Copyright (c) 2012 - mDroidd (martijn.ruijzendaal@gmail.com)
#
# Please ask permission to use parts of this script
# I will be happy to give you!
#
# Credits go to: imagemagick (image script), brut.all (apktool), google, tommytomatoe (idea of updater script), bash.
#

#
# Attention! Because the source section is device-specific, I made some
# Values here to make it easier for you to edit.
#

# This is the menu. If some of the sources are not (yet) available for your device,
# Remove them to have a clean menu.

	function SourceMenu
	{
	  SplashScreen
	  echo
	  echo " What would you like to build from source?"
	  echo
	  echo "  1) $GBSOURCE"
	  echo "  2) $ICSSOURCE"
	  echo "  3) $CMSOURCE"
	  echo "  4) $OxGBSOURCE"
	  echo "  5) $AOKPSOURCE"
	  echo "  6) $OxICSSOURCE"
	  echo "  7) $MIUISOURCE"
	  echo "  8) $CNASOURCE"
	  echo
	  echo " MAKE SURE YOU HAVE AT LEAST 20GB OF FREE SPACE"
	  echo
	  echo
	  echo -n "  Enter option:  "
	  read opt
	   echo
		case $opt in
			1) Name="GB";;
			2) Name="ICS";;
			3) Name="CM7";;
			4) Name="Ox";;
			5) Name="AOKP";;
			7) Name="Miui";;
			8) Name="CNA";;
		esac
	   Source $opt

	  echo "Done!"
	}

	function Source
	{
	SourceDir="~/WORKING_DIR_$Name"
	SourceDir=$(eval "echo $SourceDir")
	if ! [ -d $SourceDir ]
	then
		mkdir $SourceDir
	fi
	cd $SourceDir
	if ! [ -d $SourceDir/.repo ]
	then
	   case $1 in
		1) GBSOURCE;;
		2) ICSSOURCE;;
		3) CMSOURCE;;
		4) OxGBSOURCE;;
		5) AOKPSOURCE;;
	#	6) OxICSSOURCE;;
	#	7) MiuiSource;;
		8) CnaSource;;
	#	9) CAFSOURCE;;
		*) InvOpt;;
	    esac
	fi
	repo sync -f
	Error
	SplashScreen
	echo "Devices available: "
	echo
	typeset -i i=1
	for File in $(find $SourceDir/device -name vendorsetup.sh)
	do
		Command=$(tail -1 $File)
		DispDevice=${Command##*" "}
		echo "$i) $DispDevice"
		i=i+1
	done
	echo
	echo -n "Please choose a device:  "
	read opt
	File=$(find ./device -name vendorsetup.sh)
	SetDevice="$"$opt
	set $File
	Device=$(eval "echo $SetDevice")
	Command=$(tail -1 $Device)
	LunchCommand=${Command##*" "}
	cd $SourceDir
	. build/envsetup.sh
	Error
	lunch $LunchCommand
	Error
	make droid
	Error
	}


	ICSSOURCE="Stock AOSP ICS Source"

# ^^ Is the value that will be displayed in menu

	function ICSSOURCE
	{
	repo init -u https://android.googlesource.com/platform/manifest -b android-4.0.1_r1
	}

# ^^ That are the commands that will be executed when option is chosen
# Change the "repo init -u" to the one who ported the ROM to your device or stock

	GBSOURCE="Stock AOSP GB Source"

	function GBSOURCE
	{
	repo init -u https://android.googlesource.com/platform/manifest -b android-2.3.7_r1
	}

	CMSOURCE="Official CyanogenMod7 Source"

	function CMSOURCE
	{
	repo init -u git://github.com/CyanogenMod/android.git -b gingerbread
	}

	OxGBSOURCE="Oxygen source"

	function OxGBSOURCE
	{
	repo init -u git://github.com/oxygen-rom/android_manifest.git -b gingerbread
	}

	AOKPSOURCE="Android Open Kang SOURCE"

	function AOKPSOURCE
	{
	repo init -u https://github.com/AOKP/platform_manifest.git -b master
	}

	OxICSSOURCE="[UNAVAILABLE] Oxygen ICS Source"

	function OxICSSOURCE
	{
	InvOpt
	#repo init -u
	}
	
	MIUISOURCE="MIUI PatchROM"
	
	function MiuiSource
	{
	repo init -u git://github.com/MiCode/patchrom.git
	}

	CNASOURCE="CodeName Android Source (ICS)"
	function CnaSource
	{
	repo init -u git://github.com/CNA/android_manifest.git -b mod-4.0.3
	}
	
	CAFSOURCE="Code Aurora Source"
	function CAFSOURCE
	{
	InvOpt
	}
#
# KERNELS
#



function Kernels
{
SplashScreen
echo
echo "Wich kernel do you want to build??"
echo
echo "1) $Kernel1"
}


Kernel1="Stock android kernel"
Kernel2="CyanogenMod Kernel"
Kernel3=""
Kernel4=""
Kernel5=""

function Kernel1
{
	repo init -u https://android.googlesource.com/platform/manifest
	repo sync -j8
}



#
# End of section
#


if [ -f $ScriptDir/data ]
then
	$ScriptDir/data
fi


Beta="true"


MyCommand=${0##*/}
Dir=${0%%/"$MyCommand"}
ScriptDir=$(cd $Dir && pwd)
ScriptVersion="0.52"

LogFile="$ScriptDir/log"
Installer="$ScriptDir/SAI"
JarFile="$ScriptDir/Utils/apktool.jar"
SignJar="$ScriptDir/Utils/signapk.jar"
SmaliJar="$ScriptDir/Utils/smali-1.3.2.jar"
BakSmaliJar="$ScriptDir/Utils/baksmali-1.3.2.jar"
SZip="$ScriptDir/7za"
Zipalign="$ScriptDir/Utils/zipalign"
optipng="$ScriptDir/Utils/optipng"
ADB="$ScriptDir/Utils/adb"




clear


echo "---------------------------------------------------" >>$LogFile
date >> $LogFile
echo "v$ScriptVersion
---------------------------------------------------" >> $LogFile



function Restart
{
$ScriptDir/$MyCommand
set ""
exit
}

function ReOpt
{
$ScriptDir/$MyCommand $MenuOpt
exit
}

function SplashScreen
{
if [ "$1" != "1" ]
then
	clear
else
	echo
	echo
	echo
	echo
fi
if [ "$Beta" = "true" ]
then
Warn; echo "                               BETA VERSION. PLEASE REPORT BUGS!"; EndWarn
fi

echo -e "\e[40;36m ***************************************************************************************************
 *                                       Studio Android                                            *
 *                                          by mDroidd                                             *
 *                                            v$ScriptVersion                                                *
 ***************************************************************************************************\e[00;40m"
echo
}


function Done
{
SplashScreen 1
echo
echo "Done :)"
echo
echo -n -e "\rContinueing in 3..."
sleep 1
echo -n -e "\rContinueing in 2..."
sleep 1
echo -n -e "\rContinueing in 1..."
sleep 1
}

function InvOpt
{
SplashScreen
echo
echo "ERROR! Invalid option!"
echo "This option may not be defined yet... SORRY!"
echo
echo -n -e "\rContinueing in 3..."
sleep 1
echo -n -e "\rContinueing in 2..."
sleep 1
echo -n -e "\rContinueing in 1..."
sleep 1
Restart
}

function Error
{
	paplay "/usr/share/sounds/gnome/default/alerts/bark.ogg"
	SplashScreen 1
	if [ "$?" = "1" ]
	then
		echo "---->>Error<<----" >> $LogFile
	fi
	echo "An error occured."
	echo "Press ENTER to continue. The error is included in the log."
	read line
}

function Warn
{
echo -n -e "\e[31;40m"
}

function EndWarn
{
echo -n -e "\e[00;40m"
}

function Open
{
	cd $ScriptDir
	if ! [ -f $ScriptDir/Utils.zip ]
	then
	 SplashScreen
	 echo
	 echo "ERROR, DELETED UTILS.ZIP?!"
	 sleep 3
	 SplashScreen
	 exit
	fi
	if ! [ -d $ScriptDir/Utils ]
	then
		./7za x -y ./Utils.zip >> $LogFile
	fi
	return 0
}

function Close
{
	cd $ScriptDir
	SplashScreen
}




function Help
{
	xdg-open "http://forum.xda-developers.com/showpost.php?p=23546408&postcount=9"
}

while getopts "h" OPTIONS ; do
    case ${OPTIONS} in
        h|-help) Help;;
    esac
done


if [ "$1" = "" ]
then
	$ScriptDir/$MyCommand 0 2>&1 | tee -a $LogFile
	exit
fi

if [ "$1" != "" ] && [ "$1" != "0" ]
then
	Command=$1
	$ScriptDir/$MyCommand 0 $Command 2>&1 | tee -a $LogFile
	exit
fi

resize -s 31 100 > /dev/null
echo -e "\e[40m"

function Utils
{
	function CPA
	{
	   cp $ScriptDir/Utils/Script.sh ~/bin
	   cp $ScriptDir/Utils/apktool.jar ~/bin/other
	   cp $ScriptDir/Utils/apktool ~/bin/other
	   cp $ScriptDir/Utils/signapk.jar ~/bin/other
	   cp $ScriptDir/Utils/testkey.pk8 ~/bin/other
	   cp $ScriptDir/Utils/testkey.x509.pem ~/bin/other
	   cp $ScriptDir/Utils/testkey.pk8 ~/bin/other
	   cp $ScriptDir/Utils/7za ~/bin/other
	   cp $ScriptDir/Utils/aapt ~/bin/other
	   cp $ScriptDir/Utils/optipng ~/bin/other
	   cp $ScriptDir/Utils/adb ~/bin
	   cp $ScriptDir/Utils/aapt ~/bin
	   cp $ScriptDir/Utils/7za ~/bin
	   cp $ScriptDir/Utils/optipng ~/bin
	}
	Open

	mkdir -p ~/bin/other
	SplashScreen
	echo
	echo "1) ADB"
	echo "2) AAPT"
	echo "3) 7z (terminal usage only)"
	echo "4) APK Manager"
	echo "5) optipng"
	echo "a) All!"
	echo "c) Make this system compatible with all features!"
	echo
	echo "What would you like to install?"
	echo -n "Enter option:  "
	read opt

	if [ "$opt" = "1" ]
	then
		cp $ScriptDir/Utils/adb ~/bin
	fi
	if [ "$opt" = "2" ]
	then
		cp $ScriptDir/Utils/aapt ~/bin
	fi
	if [ "$opt" = "3" ]
	then
		cp $ScriptDir/Utils/7za ~/bin
	fi
	if [ "$opt" = "4" ]
	then
		cp $ScriptDir/Utils/Script.sh ~/bin
		cp $ScriptDir/Utils/apktool.jar ~/bin/other
		cp $ScriptDir/Utils/apktool ~/bin/other
		cp $ScriptDir/Utils/signapk.jar ~/bin/other
		cp $ScriptDir/Utils/testkey.pk8 ~/bin/other
		cp $ScriptDir/Utils/testkey.x509.pem ~/bin/other
		cp $ScriptDir/Utils/testkey.pk8 ~/bin/other
		cp $ScriptDir/Utils/7za ~/bin/other
		cp $ScriptDir/Utils/aapt ~/bin/other
		cp $ScriptDir/Utils/optipng ~/bin/other
	fi
	if [ "$opt" = "5" ]
	then
		cp $ScriptDir/Utils/optipng ~/bin
	fi
	if [ "$opt" = "a" ]
	then
		CPA
	fi
	if [ "$opt" = "c" ]
	then
		sudo apt-get install imagemagick
		sudo apt-get install paplay
		sudo apt-get install git-core
	fi
}

function Resize
{
	function CheckResize
	{
		SplashScreen 
		echo "Place the images in SA/Resize (sub-directories supported!)"
		echo "Then give the image format (usually png)"
		echo "Last, give the resize percentage"
		echo
		echo "Placed something in it: [$Place]"
		echo "Gave image format:      [$Format]"
		echo "Gave resize percentage: [$Per]"
		echo
		echo "h) Home"
		echo "x) Exit"
		echo
		echo "Place images in $ScriptDir/Resize..."
		echo -n "NEW: OR, place APK inside $ScriptDir/Resize..."
	}

	CheckResize

	mkdir -p $ScriptDir/Resize

	while [ "$Perc" = "" ]
	do

		sleep 1
		Empty=$(ls $ScriptDir/Resize)
		if ! [ "$Empty" = "" ] && [ "$Place" = "" ]
		then
			if [ "$(ls $ScriptDir/Resize/*.apk)" != "" ]
			then
				ResizeApk
			fi
			Place="&"
			CheckResize
			echo
			echo -n "Now give the image format:  "
		fi
		if [ "$Place" = "&" ] && [ "$Format" = "" ]
		then
			read opt
			Ext=$opt
			Format="&"
			CheckResize
		fi
		if [ "$Format" = "&" ] && [ "$Perc" = "" ]
		then
			echo
			echo "The images you want to resize FROM, are in ..DPI?"
			echo "Enter option [X/H/M/L]"
			read opt
			if [ "$opt" = "X" ]
			then
				ResIn="720"
				DirIn="xhdpi"
			fi
			if [ "$opt" = "H" ]
			then
				ResIn="480"
				DirIn="hdpi"
			fi
			if [ "$opt" = "M" ]
			then
				ResIn="320"
				DirIn="mdpi"
			fi
			if [ "$opt" = "L" ]
			then
				ResIn="240"
				DirIn="ldpi"
			fi
		
			echo
			echo "The resolution you want to resize it TO, is in ...DPI?"
			echo "Enter option [X/H/M/L]"
			read opt
			if [ "$opt" = "X" ]
			then
				ResOut="720"
				DirOut="xhdpi"
			fi
			if [ "$opt" = "H" ]
			then
				ResOut="480"
				DirOut="hdpi"
			fi
			if [ "$opt" = "M" ]
			then
				ResOut="320"
				DirOut="mdpi"
			fi
			if [ "$opt" = "L" ]
			then
				ResOut="240"
				DirOut="ldpi"
			fi
			Perc=$(echo "($ResOut / $ResIn) * 100" | bc -l)
		fi
	
		SrcDir=$ScriptDir/Resize
		DstDir=$ScriptDir/Resized
		if [ "$APKResize" = "true" ]
		then
			SrcDir=$ScriptDir/Resizing/res/drawable-$DirIn
			DstDir=$ScriptDir/Resizing/res/drawable-$DirOut
		fi
	
	done

	if ! [ -d $DstDir ]
	then
		mkdir -p $DstDir
	fi

	clear
	echo "We search for" \*\.$Ext "from $SrcDir"
	echo "And the results will be put in:" $DstDir
	echo
	sleep 1

	typeset -i i=0
	for Line in $(find $SrcDir -name \*.$Ext)
	do
		i=i+1	
		FileName=${Line##*/}
		FileFolder1=${Line##*"$ScriptDir/Resize/"}
		if [ "$APKResize" = "true" ]
		then
			FileFolder1=${Line##*"$SrcDir"}
		fi
		FileFolder=${FileFolder1%%$FileName*}
		mkdir -p  $DstDir/$FileFolder
		echo -n -e "\r$i  We are now converting" $Line 
		echo
		if [ "$FileFolder" != "" ]
		then
			DstDir2="$DstDir/$FileFolder"
		else
			DstDir2=$DstDir
		fi
		DstFile=$DstDir2/$FileName
		convert $Line -resize $Perc% $DstFile

	done

	if (( i == 0 ))
	then
		echo
		echo
		echo "ERROR!" Files found: $i $i $i $i $i $i $i $i 
		echo
		echo
	else
		echo
		echo
		echo Files converted: $i
		echo
		echo
	fi
	
	if [ "$APKResize" = "true" ]
	then
		cd $ScriptDir/Resizing
		echo " Recompressing APK..."
		$SZip a -y -tzip "$ScriptDir/Resized/Resized-$APKNAME" ./* -mx9 >> $LogFile
		UnsignedApk="$ScriptDir/Resized/Resized-$APKNAME"
		UnsignedName=${UnsignedApk##*"/"}
		Key1="$ScriptDir/Utils/testkey.x509.pem"
		Key2="$ScriptDir/Utils/testkey.pk8"
		echo " Extracting Utils.zip"
		Open
		echo " Re-signing APK... "
		java -jar $SignJar -w $Key1 $Key2 "$UnsignedApk" "$ScriptDir/Resized/Signed-$UnsignedName"
	fi

	Done 1
}

function ResizeApk
{
	APKResize="true"
	if [ -d "$ScriptDir/Resizing" ]
	then
		rm -r $ScriptDir/Resizing
	fi
	mkdir -p $ScriptDir/Resizing
	APK=$(ls $ScriptDir/Resize/*.apk)
	set $APK
	APKNAME=${1##*"/"}
	$SZip x -y -o$ScriptDir/Resizing $APK
}

function CopyFrom
{
	 SplashScreen
	 echo
	 echo "Usage: ToDir FromDir Ext"
	 echo
	 echo "Explanation: this tool lists the files inside a directory"
	 echo "And copies that from another directory to that directory."
	 echo
	 echo "Example: you want to theme framework-res.apk with theme.apk"
	 echo "So you enter framework-res as ToDir, and theme as FromDir"
	 echo 
	 echo -n "Enter values:  "
	 read opt
	 set $opt
	 if (( $# != 3 ))
	 then
	  SplashScreen
	  echo "ERROR! Usage: ToDir FromDir Ext"
	  exit
	 fi
	 if ! [ -d $ToDir ] || ! [ -d $FromDir ]
	 then
		SplashScreen
		echo "ERROR, $ToDir/$FromDir does not exist!" 
		exit 1
	 fi
	 ToDir=$(eval "echo $1")
	 FromDir=$(eval "echo $2")
	 Ext=$3
	 typeset -i i=0
	 for Line in $(ls $FwDir/*.$Ext)
	 do 
		AbsFile=${Line##*/}
		echo "copy $SrScriptDir/$AbsFile to $FwDir"
		cp -f $SrScriptDir/$AbsFile $FwDir
		i=i+1
	 done

		clear
		echo
		echo
		echo "Files copied: 00000$i"
		echo
		echo "Press enter."
		read line
		Restart
}


function Theme
{
	SplashScreen
	echo "Hey! This is new!"
	echo
	echo "Place the images you want to theme inside $ScriptDir/Theme"
	echo "When you did that, this will continue"
	if ! [ -d $ScriptDir/Theme ]
	then
		mkdir Theme
	fi
	while :
	do
		sleep 1
		cd $ScriptDir/Theme
		Check=$(ls)
		if [ "$Check" != "" ]
		then
			echo "You placed something in it :)"
			ContinueTheme
			Restart
			exit
		fi
	done
}


function ContinueTheme
{
	SplashScreen
	echo "OK, you placed something in it!"
	echo
	echo "Now choose the values you want to REMOVE:"
	echo "In a scale from 0-100 red,green,blue - WITHOUT SPACES!"
	echo "Example: purple = 25,50,0"
	echo
	echo "WARNING: It is recommended to start with a white theme."
	echo "Cause theming red images blue will make it purple instead!"
	echo
	echo -n "  Please choose values RGB:  "
	read opt
	set $opt
	Values=$opt
	cd $ScriptDir/Theme
	ThemeFiles=$(ls *.apk)
	typeset -i i=0
	for ThemeFile in $(ls *.png)
	do
		i=i+1
	done
	cd ..
	SplashScreen
	echo "Files found: $i"
	echo "Press ENTER to start theming..."
	read line
	for ThemeFile in $ThemeFiles
	do
		mogrify -colorize $Values $ScriptDir/Theme/$ThemeFile
	done
	cd -
}

function Optimize
{

	mkdir -p $ScriptDir/APK/EX
	SplashScreen
	echo " Hello!"
	echo "  Place the images you wawnt to optimize inside $ScriptDir/APK/EX"
	echo "  Yes, that means you need to extract the APK first."
	echo " When you did that, this will continue :)"
	while :
	do
		sleep 1
		cd $ScriptDir/APK/EX
		Check=$(ls)
		if [ "$Check" != "" ]
		then
			echo "You placed something in it :)"
			DoOptimize
			Restart
			exit
		fi
	done
}

function DoOptimize
{
	for IMAGE in $(cd $ScriptDir/APK/EX && find -name *.png)
	do
		$optipng -099 "$IMAGE"
	done
	Done 1
}

function KernelMenu
{
	mkdir ~/KernelSource
	cd ~/KernelSource
	mkdir aosp kernel repo
	cd aosp
	mkdir master
	cd master
	Kernels
	read opt
	set $opt
	case $opt in
		1) Kernel1;;
		2) Kernel2;;
		3) Kernel3;;
		4) Kernel4;;
		5) Kernel5;;
	esac

	export ARCH=arm
	export CROSS_COMPILER=arm-eabi-
	export CROSS_COMPILE=arm-eabi-
	export PATH=$PATH:~/KernelSource/aosp/master/prebuilt/linux-x86/toolchain/arm-eabi-4.4.3/bin/
}

function Install
{
	echo "Waiting for device..."
	$ADB "wait-for-device"
	echo "Press enter to continue."
	read line
	cd $ScriptDir/APK/OUT
	for APK in $(ls Signed*.apk)
	do
		$ADB install -r $APK
	done
}

function Sign
{
	mkdir -p $ScriptDir/APK/IN $ScriptDir/APK/OUT
	Open
	SplashScreen
	typeset -i i=0
	for Keys in $(cd $ScriptDir/Utils && ls *.pk8)
	do
		DispName=${Keys%%".pk8"*}
		i=i+1
		echo "$i) $DispName"
	done
	echo " (Platform=system) (SuperUser=Root) (Testkey=normal)"
	echo -n "  Wich key do you want to use?"
	read opt
	Key=$(cd $ScriptDir/Utils && ls *.pk8)
	set $Key
	KeyNumb="$"$opt
	Key=$(eval "echo $KeyNumb")
	Name=${Key%%".pk8"*}
	Key1="$ScriptDir/Utils/$Name.x509.pem"
	Key2="$ScriptDir/Utils/$Name.pk8"

	SplashScreen
	echo
	typeset -i u=0
	echo "  IN APK/OUT:"
	for Unsigned in $(cd $ScriptDir/APK/OUT && ls Unsigned*.apk)
	do
		u=u+1
		echo " $u) $Unsigned"
	done
	typeset -i a=$u
	echo
	echo "  IN APK/IN:"
	for APK in $(cd $ScriptDir/APK/IN && ls *.apk)
	do
		a=a+1
		echo " $a) $APK"
	done
	if [ "$a" -gt "0" ]
	then
		echo
		echo " a) All. $a Files in total"
	fi
	echo
	echo -n " Wich APK do you want to sign?? "
	read opt
	echo
	if [ "$opt" = "a" ]
	then
		cd $ScriptDir/APK/OUT
		for UnsignedApk in $(ls Unsigned*.apk)
		do
			ApkName=${UnsignedApk##*"Unsigned-"}
			ApkName=${ApkName%%"."*}
			java -jar $SignJar -w $Key1 $Key2 "$UnsignedApk" "Signed-$ApkName.apk"
			echo
		done
		cd $ScriptDir/APK/IN
		for UnsignedApk in $(ls *.apk)
		do
			ApkName=${UnsignedApk##*"Unsigned-"}
			ApkName=${ApkName%%"."*}
			java -jar $SignJar -w $Key1 $Key2 "$UnsignedApk" "$ScriptDir/APK/OUT/Signed-$ApkName.apk"
			echo
		done
		Restart
	fi
	if [ "$opt" -le "$u" ]
	then
		cd $ScriptDir/APK/OUT
		UnsignedApk=$(ls Unsigned*.apk)
	else
		cd $ScriptDir/APK/IN
		UnsignedApk=$(ls *.apk)
	fi
	set $UnsignedApk
	ApkNumb="$"$opt
	SignApk=$(eval "echo $ApkNumb")
	ApkName=${UnsignedApk##*"Unsigned-"}
	ApkName=${ApkName%%"."*}
	java -jar $SignJar -w $Testkey1 $Testkey2 "$SignApk" "Signed-$ApkName.apk"
	Restart		




	mkdir -p $ScriptDir/APK/OUT
	Open
	SplashScreen
	echo
	typeset -i i=0
	for Keys in $(cd $ScriptDir/Utils && ls *.pk8)
	do
		DispName=${Keys%%".pk8"*}
		i=i+1
		echo "$i) $DispName"
	done
	echo " (Platform=system) (SuperUser=Root) (Testkey=normal)"
	echo -n "  Wich key do you want to use?"
	read opt
	Key=$(cd $ScriptDir/Utils && ls *.pk8)
	set $Key
	KeyNumb="$"$opt
	Key=$(eval "echo $KeyNumb")
	Name=${Key%%".pk8"*}
	Key1="$ScriptDir/Utils/$Name.x509.pem"
	Key2="$ScriptDir/Utils/$Name.pk8"
	typeset -i i=0
	cd $ScriptDir/APK/OUT
	for UnsignedApk in $(cd $ScriptDir/APK/OUT && ls Unsigned*.apk && cd $ScriptDir/APK/SIGN && ls *.apk)
	do
		i=i+1
		echo " $i) $UnsignedApk"
	done
	echo
	if [ "$i" != "0" ]
	then
		echo " a) All! $i Files in total."
		echo
		echo -n " Wich APK do you want to sign?? "
		read opt
		if [ "$opt" = "a" ]
		then
			for UnsignedApk in $(ls Unsigned*.apk)
			do
				ApkName=${UnsignedApk##*"Unsigned-"}
				ApkName=${ApkName%%"."*}
				java -jar $SignJar -w $Key1 $Key2 "$UnsignedApk" "Signed-$ApkName.apk"
				echo
			done

			for UnsignedApk in $(cd $ScriptDir/APK/SIGN && ls *.apk)
			do
				ApkName=${UnsignedApk##*"Unsigned-"}
				ApkName=${ApkName%%"."*}
				java -jar $SignJar -w $Key1 $Key2 "$UnsignedApk" "$ScriptDir/APK/OUT/Signed-$ApkName.apk"
				echo
			done
			Restart
		fi

		UnsignedApk=$(ls Unsigned*.apk)
		set $UnsignedApk
		ApkNumb="$"$opt
		SignApk=$(eval "echo $ApkNumb")
		ApkName=${UnsignedApk##*"Unsigned-"}
		ApkName=${ApkName%%"."*}
		java -jar $SignJar -w $Testkey1 $Testkey2 "$SignApk" "Signed-$ApkName.apk"
	else
		SplashScreen
		echo "  No files starting with Unsigned- have been found."
		echo "  If you want to sign, please compile it"
		echo "  Or place it in $ScriptDir/APK/SIGN"
		echo "Press ENTER"
		read line
	fi
}

function Zipalign
{
	Open
	SplashScreen
	echo
	typeset -i i=1
	cd $ScriptDir/APK/OUT
	SignedApk=$(ls Signed*.apk)
	if [ "$SignedApk" = "0" ]
	then
		SplashScreen
		echo "ERROR! You must sign the APK's first."
		echo "Press ENTER to continue"
		read line
		Restart
	fi
	for SignedApk in $(ls Signed*.apk)
	do
		echo " $i) $SignedApk"
		i=i+1
	done
	i=i-1
	echo
	echo " a) All! $i Files in total."
	echo
	echo -n " Wich APK do you want to sign?? "
	read opt
	if [ "$opt" = "a" ]
	then
		for SignedApk in $(ls Signed*.apk)
		do
			ApkName=${SignedApk##*"Signed-"}
			ApkName=${ApkName%%"."*}
			Out="$ScriptDir/APK/OUT/Zipaligned-Signed-$ApkName.apk"
			$Zipalign -fv 4 $SignedApk $Out
			echo
		done
		Restart
	fi

	SignedApk=$(ls Signed*.apk)
	set $UnsignedApk
	ApkNumb="$"$opt
	ZipaApk=$(eval "echo $ApkNumb")
	ApkName=${SignedApk##*"Signed-"}
	ApkName=${ApkName%%"."*}
	Out="$ScriptDir/APK/OUT/Zipaligned-Signed-$ApkName.apk"
	$Zipalign -fv 4 $SignedApk $Out
	Restart
}

function DeCompile
{
	Open
	mkdir -p $ScriptDir/APK/DEC $ScriptDir/APK/IN $ScriptDir/APK/OUT
	SplashScreen
	echo
	typeset -i i=0
	echo "   DECOMPILE:"
	for Decompile in $(cd $ScriptDir/APK/IN && ls *.apk)
	do
		i=i+1
		echo " $i) $Decompile"
	done
	if [ "$i" -gt "0" ]
	then
		echo " d) All! $i Files in total."
	fi
	typeset -i a=$i
	echo
	echo "   COMPILE:"
	for Compile in $(cd $ScriptDir/APK/DEC && find -maxdepth 1 -type d)
	do
		a=a+1
		DecFolder=${Compile##*/}
		echo " $a) $DecFolder"
	done
	if [ "$a" -gt "$i" ]
	then
		a=a-i
		echo " c) All! $a Files in total."
	fi
	echo -n " Wich APK do you want to (de)compile?? "
	read opt
	echo
	if [ "$opt" = "d" ]
	then
		cd $ScriptDir/APK/IN
		for APK in $(ls *.apk)
		do
			DispName=${APK%%"."*}
			java -jar $JarFile d -f $APK "$ScriptDir/APK/DEC/$DispName"
			echo
		done
		Restart
	fi
	if [ "$opt" = "c" ]
	then
		cd $ScriptDir/APK/DEC
		for APKFOLDER in $(find -maxdepth 1 -type d)
		do
			FolderName=${APKFOLDER##*"/"}
			java -jar $JarFile b -f $APKFOLDER "$ScriptDir/APK/OUT/Unsigned-$FolderName.apk"
			echo
		done
		Restart
	fi
	cd $ScriptDir/APK/IN
	APK=$(ls *.apk)
	set $APK
	ApkNumb="$"$opt
	DecApk=$(eval "echo $ApkNumb")
	Check=$(echo "$opt < $i" | bc)
	if [ "$opt" -le "$i" ]
	then
		DispName=${DecApk%%".apk"}
		DispName=${DispName##*/}
		java -jar $JarFile d -f $DecApk "$ScriptDir/APK/DEC/$DispName"
	else
		cd $ScriptDir/APK/DEC
		APKFOLDER=$(find -maxdepth 1 -type d)
		set $APKFOLDER
		CompOpt=$(echo "$opt - $i" | bc)
		ApkNumb="$"$CompOpt
		ComApk=$(eval "echo $ApkNumb")
		FolderName=${ComApk##*"/"}
		java -jar $JarFile b -f $ComApk "$ScriptDir/APK/OUT/Unsigned-$FolderName.apk"
	fi
	Restart		
}


function ExPackage
{
	Open
	mkdir -p $ScriptDir/APK/EX $ScriptDir/APK/OUT $ScriptDir/APK/IN
	SplashScreen
	echo
	typeset -i i=0
	echo "   EXTRACT:"
	for Extract in $(cd $ScriptDir/APK/IN && ls *.apk)
	do
		i=i+1
		echo " $i) $Extract"
	done
	if [ "$i" -gt "0" ]
	then
		echo " e) All! $i Files in total."
	fi
	typeset -i a=$i
	echo
	echo "   REPACKAGE:"
	for Repackage in $(cd $ScriptDir/APK/EX && find -maxdepth 1 -type d)
	do
		a=a+1
		RepackageFolder=${Repackage##*/}
		echo " $a) $RepackageFolder"
	done
	if [ "$a" -ge "$i" ]
	then
		a=a-i
		echo " r) All! $a Files in total."
	fi
	echo -n " Wich APK do you want to extract/repackage?? "
	read opt
	echo
	if [ "$opt" = "e" ]
	then
		cd $ScriptDir/APK/IN
		for APK in $(ls *.apk)
		do
			DispName=${APK%%".apk"*}
			DispName=${DispName##*"/"}
			$SZip x -y -o"$ScriptDir/APK/EX/$DispName" $APK
			echo
		done
		Restart
	fi
	if [ "$opt" = "r" ]
	then
		cd $ScriptDir/APK/EX
		for ExFolder in $(find -maxdepth 1 -type d)
		do
			cd $ExFolder
			Name=${ExFolder##*"/"}
			$SZip a -y -tzip "$ScriptDir/APK/OUT/Repackaged-$Name.apk" ./* -mx9
		done
		Restart
	fi
	if [ "$opt" -le "$i" ]
	then
		cd $ScriptDir/APK/IN
		APK=$(ls *.apk)
		set $APK
		ApkNumb="$"$opt
		ExApk=$(eval "echo $ApkNumb")
		DispName=${ExApk%%".apk"*}
		DispName=${DispName##*"/"}
		$SZip x -y -o"$ScriptDir/APK/EX/$DispName" $ExApk
	else
		cd $ScriptDir/APK/EX
		ExFolders=$(find . -maxdepth 1 -type d)
		RepOpt=$(echo "$opt - $i" | bc)
		set $ExFolders
		ApkNumb="$"$RepOpt
		RepApk=$(eval "echo $ApkNumb")
		Name=${RepApk##*"/"}
		echo $RepApk
		cd $RepApk
		$SZip a -y -tzip "$ScriptDir/APK/OUT/Repackaged-$Name.apk" ./* -mx9
	fi
	Restart		
}

function Compile
{
	Open
	mkdir -p $ScriptDir/APK/OUT
	SplashScreen
	echo
	typeset -i i=1
	for APKFOLDER in $(cd $ScriptDir/APK/DEC && find -maxdepth 1 -type d)
	do
		echo " $i) $APKFOLDER"
		i=i+1
	done
	i=i-1
	echo
	echo " c) Compile all! $i Files in total."
	echo
	echo -n " Wich APK do you want to compile?? "
	read opt
	if [ "$opt" = "a" ]
	then
		for APKFOLDER in $(cd $ScriptDir/APK/DEC && find -maxdepth 1 -type d)
		do
			FolderName=${APKFOLDER##*"/"}
			java -jar $JarFile b $APKFOLDER "$ScriptDir/APK/OUT/Unsigned-$FolderName.apk"
			echo
		done
		Restart
	fi
	APKFOLDER=$(cd $ScriptDir/APK/DEC && find -maxdepth 1 -type d)
	set $APKFOLDER
	ApkNumb="$"$opt
	ComApk=$(eval "echo $ApkNumb")
	FolderName=${ComApk##*"/"}
	cd $ScriptDir/APK/DEC
	java -jar $JarFile b $ComApk "$ScriptDir/APK/OUT/Unsigned-$FolderName.apk"
}



function Extract
{
	mkdir -p $ScriptDir/APK/EX $ScriptDir/APK/IN $ScriptDir/APK/OUT $ScriptDir/APK/DEC
	SplashScreen

	typeset -i i=1
	for APK in $(cd $ScriptDir && find -name *.apk)
	do
		echo " $i) $APK"
		i=i+1
	done
	i=i-1
	echo
	echo " a) All! $i Files in total."
	echo
	echo -n " Wich APK do you want to extract?? "
	read opt
	if [ "$opt" = "a" ]
	then
		for APK in $(cd $ScriptDir && find -name *.apk)
		do
			Name=${APK##*"/"}
			Name=${Name%%"."*}
			$SZip x -o"$ScriptDir/APK/EX/$Name" $APK
			Restart
		done
	fi
	APK=$(cd $ScriptDir && find -name *.apk)
	set $APK
	ApkNumb="$"$opt
	ExApk=$(eval "echo $ApkNumb")
	$SZip x -o"$ScriptDir/APK/EX" $ExApk
}


function Repackage
{
	mkdir -p $ScriptDir/APK/OUT mkdir -p $ScriptDir/APK/EX
	SplashScreen
	cd $ScriptDir/APK/EX
	typeset -i i=0
	for ExdFolder in $(find -maxdepth 1 -type d)
	do
		i=i+1
		echo " $i) $ExdFolder"
	done
	echo
	echo " a) All! $i Files in total."
	echo
	echo -n " Wich APK do you want to repackage?? "
	read opt
	if [ "$opt" = "a" ]
	then
		for ExFolder in $(find -maxdepth 1 -type d)
		do
			cd $ExFolder
			Name=${ExFolder##*"/"}
			$SZip a -tzip "$ScriptDir/APK/OUT/Repackaged-$Name.apk" ./* -mx9
		done
	 Restart
	fi
	ExFolders=$(find -maxdepth 1 -type d)
	set $ExFolders
	ApkNumb="$"$opt
	RepApk=$(eval "echo $ApkNumb")
	Name=${RepApk##*"/"}
	cd $RepApk
	$SZip a -tzip "$ScriptDir/APK/OUT/Repackaged-$Name.apk" ./* -mx9
}

function SwitchBuild
{
	cd $ScriptDir
	rm Build*~
	SplashScreen
	echo
	echo "1)  Other - guides you through a tutorial and fixes bugs"
	typeset -i i=1
	for Name in $(find -name \*Build*)
	do
		i=i+1
		NameDisp=${Name##*"Build"}
		echo "$i)  $NameDisp"
	done
	echo
	echo -n "Enter Option:  "
	read opt
	if [ "$opt" = "1" ]
	then
		Source=$(find -name \*Include)
		Inc=${Source##*/}
		. $Inc
	else
		Sources=$(find -name \*Build*)
		set $Sources
		opt=$(echo "$opt - 1" | bc)
		Source="$"$opt
		Source=$(eval "echo $Source")
		Source=${Source##*"/"}
		cd $ScriptDir
		. $Source
		echo "  Included $Source values"
		echo
		echo "Do you want to do that on startup?"
		echo -n "  Enter option [Y/n] :  "
		read answer
		if [ "$answer" != "n" ] || [ "$answer" != "N" ] || [ "$answer" != "no" ] 
		then
			echo "#!/bin/bash" > $ScriptDir/data
			echo ". $Source" >> $ScriptDir/data
		fi
		Done
	fi
}


function SDKInstaller
{
	 SplashScreen
	 Open
	 cp $ScriptDir/7za ~
	 cd
	 echo "DOWNLOADING SDK INSTALLER..."
	 echo
	 wget http://dl.google.com/android/android-sdk_r16-linux.tgz
	 SDK=$(find -name android-sdk*.tgz -maxdepth 1)
	 ./7za x -y $SDK
	 rm $SDK
	 chmod 777 ~/android-sdk-linux -R
	 cd ~/android-sdk-linux/tools
	 ./android > /dev/null
	 rm ~/7za
	 Restart
}

function JDKInstaller
{
	SplashScreen
	Warn
	if [ -f ~/Downloads/jdk*.bin ]
	then
		rm jdk*.bin
	fi
	echo
	echo "OK, this is a little harder..."
	echo "After clicking ENTER, you need to download the JAVA binary."
	echo "But it depends on your PC..."
	echo "Is your PC 64-bits, use x64. Is it Intel Itanium, use Intel Itanium."
	echo "Else, and if you don't know, use x86 (i586)."
	echo "You need the .bin version, not the .rpm.bin"
	EndWarn
	echo "Click ENTER to open the oracle website and download."
	read line
	xdg-open http://www.oracle.com/technetwork/java/javase/downloads/jdk-6u29-download-513648.html >> /dev/null
	cd ~/Downloads
	Change=0
	sleep 2
	while [ "$Change" != "1" ]
	do
		typeset -i o=0
		for File in $(ls -l)
		do
			o=o+1
		done
		Old=$o
		sleep 1
		typeset -i n=0
		for File in $(ls -l)
		do
			n=n+1
		done
		New=$n
		if [ "$Old" != "$New" ]
		then
			Change="1"
		fi
	done
	LS=$(ls -c)
	set $LS
	File=$1
	SplashScreen
	echo "Is this the file you downloaded: $File ?"
	echo "If so, wait till download has finished and press enter."
	echo "Else, do Ctrl+C and report error."
	read line
	LS=$(ls -c)
	set $LS
	File=$1
	if [ "$File" != "*.bin" ]
	then
		File="$File.bin"
	fi
	SplashScreen
	echo "After this, you will be requested to enter your password."
	echo "That is, so that Java is not in your home directory, but safe elsewhere."
	echo "Nothing will go wrong. Just follow the onscreen commands!"
	echo "Press ENTER"
	read line
	echo "Making directory /opt/java/64/"
	sudo mkdir -p /opt/java/64/
	echo "Copying $File"
	sudo cp $File /opt/java/64
	echo "File copied"
	cd /opt/java/64
	echo "Setting permissions..."
	sudo chmod +x $File
	echo "Opening $File."
	./$File
	exit
}


function Smali
{
	mkdir -p $ScriptDir/Advance/Smali/IN $ScriptDir/Advance/Smali/OUT
	SplashScreen
	echo
	echo " Paste all smali files inside $ScriptDir/Advance/Smali/IN"
	while :
	do
		sleep 1
		Check=$(ls $ScriptDir/Advance/Smali/IN)
		if [ "$Check" != "" ]
		then
			echo " Nice, you placed something in it!"
			Check="&"
			typeset -i i=0
			for File in $(cd $ScriptDir/Advance/Smali/IN && ls *.smali)
			do
				i=i+1
			done
			echo "  Smali files found: $i"
			echo " Enter the output name. Example: if you want output.dex, enter output."
			read opt
			Output=$opt.dex
			cd $ScriptDir/Advance/Smali/IN
			java -jar $SmaliJar ./*.smali -o $ScriptDir/Advance/Smali/OUT/$Output
			rm -rf $ScriptDir/LatestOutput
			ln -s $ScriptDir/Advance/Smali/OUT $ScriptDir/LatestOutput
			Done
			Restart
		fi
	done
}


function Baksmali
{
	mkdir -p $ScriptDir/Advance/Baksmali/IN $ScriptDir/Advance/Baksmali/OUT
	SplashScreen
	echo
	echo " Paste all DEX files inside $ScriptDir/Advance/Smali/IN"
	while :
	do
		sleep 1
		Check=$(ls $ScriptDir/Advance/Baksmali/IN)
		if [ "$Check" != "" ]
		then
			echo " Nice, you placed something in it!"
			Check="&"
			typeset -i i=0
			cd $ScriptDir/Advance/Baksmali/IN
			for File in $(ls *dex)
			do
				i=i+1
			done
			echo "  Dex files found: $i"
			echo "  Press ENTER to continue !"
			read opt
			for File in $(ls *dex)
			do
				Output=${File%%"."*}
				Output=${Output##*/}
				Output=$ScriptDir/Advance/Baksmali/OUT/$Output
				java -jar $BakSmaliJar $File -o $Output
			done
			rm -rf $ScriptDir/LatestOutput
			ln -s $Output $ScriptDir/LatestOutput
			Done
			Restart
		fi
	done
}

function DeodexFile
{
	OdexFile=$1
	FrameworkDir=$2
	API_LVL=$3
	OdexName=${OdexFile##*"/"}
	echo
	echo 
	echo " Disassebling $OdexName..."
	java -Xmx512m -jar $BakSmaliJar -d $FrameworkDir -a $API_LVL -x $OdexFile -o $ScriptDir/Advance/CURRENT/out
	cd $ScriptDir/Advance/CURRENT
	echo " Assembling $OdexName into a .dex file..."
	java -jar -Xmx512m $SmaliJar -a $API_LVL ./out -o $ScriptDir/Advance/CURRENT/classes.dex
	echo " Removing Smali directory"
	rm -rf $ScriptDir/Advance/CURRENT/out
	echo " Finding corresponding APK..."
	Name=${OdexFile%%".odex"*}
	APKPlace="$Name.apk"
	APKName=${##"/"*}
	if ! [ -e $APKPlace ]
	then
		echo "Error, $APKPlace does not exist!"
		Error="&"
	fi
	if [ "$Error" != "&" ]	
	then
		echo "  Updating APK with classes.dex included..."
		$SZip u -tzip -y $APKPlace $ScriptDir/Advance/CURRENT/classes.dex -mx9 >> /dev/null
		echo " Cleaning up..."
		rm -rf $ScriptDir/Advance/CURRENT/*
		rm $OdexFile
	fi			
}


function Deodex
{
	Open
	mkdir -p $ScriptDir/Advance/DE-ODEX/IN $ScriptDir/Advance/DE-ODEX/OUT $ScriptDir/Advance/WORKING $ScriptDir/Advance/CURRENT
	SplashScreen
	echo "Hello! This is my home-made tool to deodex :D"
	echo "A couple things are necessary to complete."
	echo
	echo "Paste your ROMs update inside $ScriptDir/Advance/DE-ODEX/IN..."
	while ! [ "$API" = "&" ]
	do
		sleep 1
		cd $ScriptDir/Advance/DE-ODEX/IN
		Check=$(find -name *.zip)
		if [ "$Check" != "" ]
		then
			echo " Nice, you placed something in it!"
			ZipFile=$(ls *.zip)
			$SZip x -y $ZipFile -o$ScriptDir/Advance/WORKING
			Placed="&"
		fi
		if [ "$Placed" = "&" ]
		then
			echo "  GB API = 10"
			echo "  HC = 11, 12, 13"
			echo "  ICS = 14"
			echo -n "  Enter API:  "
			read API_LVL
			API="&"
		fi
		if [ "$API" = "&" ]
		then
			AppDir=$(find $ScriptDir/Advance/WORKING -type d -name app)
			FrameworkDir=$(find $ScriptDir/Advance/WORKING -type d -name framework)
			cd $AppDir
			for OdexFile in $(ls *.odex)
			do
				OdexPath="$AppDir/$OdexFile"
				DeodexFile $OdexPath $FrameworkDir $API_LVL
		
			done
		fi
				
	done
}



function BetaInstaller
{
	SplashScreen
	echo "This is the StudioAndroid  BETA installer..."
	echo "Do you want to continue???"
	echo
	echo -n "Enter option [Y/n] :  "
	read opt
	if [ "$opt" != "n" ]
	then
		$BetaInstaller
		Restart
	fi
}

function Help
{
	xdg-open "http://forum.xda-developers.com/showpost.php?p=23546408&postcount=9" > /dev/null
	Restart
}


function AromaMenu
{
	$ScriptDir/Aroma
	if [ "$?" = "999" ]
	then
		exit
	fi
}

while getopts "*" OPTIONS ; do
    case ${OPTIONS} in
        h) Help;;
    esac
done


if ! [ -f ~/bin/SA ]
then
 SplashScreen
 echo "Do you want to generate a script"
 echo "So you can open this by only typing SA in terminal?"
 echo 
 echo "You will always see this when you choose for NO..."
 echo
 echo -n "Enter option [Y/n] :  "
 read opt
 set $opt
 if ! [ "$opt" = "n" ] || [ "$opt" != "no" ]
 then
  SplashScreen
  if ! [ -d ~/bin ]
  then
	mkdir ~/bin
	PATH=~/bin:$PATH
  fi
echo '#!/bin/bash' > ~/bin/SA
echo "$ScriptDir/$MyCommand"' $@' >> ~/bin/SA
  chmod 755 ~/bin/SA
  Restart
 fi
fi

if [ -f $ScriptDir/data ]
then
	. $ScriptDir/data
fi

function Menu
{
while :
do
 clear
 SplashScreen
 echo -e "\e[40;36m   #####################               #####################                #####################"
 echo -e "   #   Utils:          #               #   Develop:        #                #   APK:            #"
 echo -e "   #####################               #####################                #####################\e[00;40m"
 echo "   Cl) Clean the workspace               6) Prepare building                  13) (De)compile APK"
 echo "    1) Install Utilities                 7) Build from source                 14) Extract/Repackage"
 echo "    2) CopieFrom                         8) Build Kernel                      15) Sign APK"
 echo "    3) Resize images/APK                 -) Add governor                      16) Zipalign APK"
 echo "    4) Batch theme                      10) Switch Build-MODE                 17) Compile, Zip, Sign"
 echo "    5) Optimize images                  11) Install the Android SDK!          18) Install APK"
 echo "                                        12) Install the Java JDK!"
 echo ""
 echo -e "\e[40;36m   ####################                #####################                ####################"
 echo -e "   #   Advanced:      #                #                   #                #   Other:         #"
 echo -e "   ####################                #####################                ####################\e[00;40m"
 echo "    19) Smali                                                                 l) Check the log!"
 echo "    20) Baksmali                                                              c) Changelog"
 echo "     -) ODEX                                                                  h) Help! What do I do?"
 echo "    22) DE-ODEX                                                               u) Update"
 echo "    23) Aroma Menu                                                            b) BetaInstaller"
 echo "                                                                              x) Exit"
 echo 
 echo -n -e "\e[40;36m   Enter option: \e[00;40m"
 if [ "$2" != "" ]
 then
	opt=$2
 else
 	read opt
 fi
 MenuOpt="$opt"

if [ "$opt" = "3" ] || [ "$opt" = "4" ]
then
		mogrify -version
		if [ "$?" = "1" ]
		then
			sudo apt-get install imagemagick
		fi
fi

 case $opt in
	6) clear;;
	1) Utils;;
	2) CopyFrom;;
	3) Resize;;
	4) Theme;;
	5) Optimize;;
	7) SourceMenu;;
	8) KernelMenu;;
	10) SwitchBuild;;
	11) SDKInstaller;;
	12) JDKInstaller;;
	13) DeCompile;;
	14) ExPackage;;
	15) Sign;;
	16) Zipalign;;
	17) Compile; Zipalign; Sign;;
	18) Install;;
	19) Smali;;
	20) Baksmali;;
	22) Deodex;;
	23) AromaMenu;;
	Cl) rm -r $ScriptDir/Theme $ScriptDir/APK $ScriptDir/Advance $ScriptDir/LatestOutput ~/bin/SA $ScriptDir/log;;
	l) gedit $ScriptDir/$LogFile;;
	w) SplashScreen; xdg-open 'http://forum.xda-developers.com/donatetome.php?u=4234443' 2> /dev/null; clear; Restart;;
	c) cat $ScriptDir/changelog; echo; echo "Press ENTER"; read line; Restart;;
	h) Help; exit;;
	u) $ScriptDir/ACI; exit;;
	x) echo -e "\e[00m"; SplashScreen;  exit 1;;
	b) BetaInstaller;;
	*) InvOpt;;
 esac


if [ "$opt" = "6" ]
then

 SplashScreen
 echo "Wich Ubuntu version are you?"
 echo "Options:"
 echo
 echo "1) Ubuntu 11.10"
 echo "2) Ubuntu 10.10"
 echo "3) Ubuntu 10.04 (recommended)(LTS also)"
 echo
 echo "4) I already configured this..."
 echo
 echo -n "Enter option: "
 read opt
 FirstOption=$opt
 if [ "$opt" != "4" ]
 then
# All required packages will be installed
  clear
   echo "This is gonna take a while..."
   echo "In the meanwhile, you could thank me or donate?"
   sleep 3
  sudo add-apt-repository ppa:fkrull/deadsnakes
  sudo apt-get update
  sudo apt-get upgrade
  sudo apt-get install python2.5
  sudo add-apt-repository "deb http://archive.canonical.com/ lucid partner"
  sudo add-apt-repository "deb-src http://archive.canonical.com/ubuntu lucid partner"
  sudo apt-get update
  sudo apt-get install sun-java6-jdk
  sudo apt-get update
  sudo apt-get upgrade
  sudo apt-get install git-core
  sudo apt-get install valgrind
  sudo apt-get install git-core gnupg flex bison gperf build-essential \
  zip curl zlib1g-dev libc6-dev lib64ncurses5-dev \
  x11proto-core-dev libx11-dev lib64readline-gplv2-dev lib64z1-dev \
  libgl1-mesa-dev g++-multilib tofrodos
  mkdir -p ~/bin
  mkdir -p ~/android/system
  curl https://dl-ssl.google.com/dl/googlesource/git-repo/repo > ~/bin/repo
  chmod a+x ~/bin/repo
  sudo echo '#Acer
SUBSYSTEM==usb, SYSFS{idVendor}==0502, MODE=0666

#ASUS
SUBSYSTEM==usb, SYSFS{idVendor}==0b05, MODE=0666

#Dell
SUBSYSTEM==usb, SYSFS{idVendor}==413c, MODE=0666

#Foxconn
SUBSYSTEM==usb, SYSFS{idVendor}==0489, MODE=0666

#Garmin-Asus
SUBSYSTEM==usb, SYSFS{idVendor}==091E, MODE=0666

#Google
SUBSYSTEM==usb, SYSFS{idVendor}==18d1, MODE=0666

#HTC
SUBSYSTEM=="usb", SYSFS{idVendor}=="0bb4", MODE="0666"

#Huawei
SUBSYSTEM==usb, SYSFS{idVendor}==12d1, MODE=0666

#K-Touch
SUBSYSTEM==usb, SYSFS{idVendor}==24e3, MODE=0666

#KT Tech
SUBSYSTEM==usb, SYSFS{idVendor}==2116, MODE=0666

#Kyocera
SUBSYSTEM==usb, SYSFS{idVendor}==0482, MODE=0666

#Lenevo
SUBSYSTEM==usb, SYSFS{idVendor}==17EF, MODE=0666

#LG
SUBSYSTEM==usb, SYSFS{idVendor}==1004, MODE=0666

#Motorola
SUBSYSTEM==usb, SYSFS{idVendor}==22b8, MODE=0666

#NEC
SUBSYSTEM==usb, SYSFS{idVendor}==0409, MODE=0666

#Nook
SUBSYSTEM==usb, SYSFS{idVendor}==2080, MODE=0666

#Nvidia
SUBSYSTEM==usb, SYSFS{idVendor}==0955, MODE=0666

#OTGV
SUBSYSTEM==usb, SYSFS{idVendor}==2257, MODE=0666

#Pantech
SUBSYSTEM==usb, SYSFS{idVendor}==10A9, MODE=0666

#Philips
SUBSYSTEM==usb, SYSFS{idVendor}==0471, MODE=0666

#PMC-Sierra
SUBSYSTEM==usb, SYSFS{idVendor}==04da, MODE=0666

#Qualcomm
SUBSYSTEM==usb, SYSFS{idVendor}==05c6, MODE=0666

#SK Telesys
SUBSYSTEM==usb, SYSFS{idVendor}==1f53, MODE=0666

#Samsung
SUBSYSTEM==usb, SYSFS{idVendor}==04e8, MODE=0666

#Sharp
SUBSYSTEM==usb, SYSFS{idVendor}==04dd, MODE=0666

#Sony Ericsson
SUBSYSTEM==usb, SYSFS{idVendor}==0fce, MODE=0666

#Toshiba
SUBSYSTEM==usb, SYSFS{idVendor}==0930, MODE=0666

#ZTE
SUBSYSTEM==usb, SYSFS{idVendor}==19D2, MODE=0666' > /etc/udev/rules.d/51-android.rules
  sudo chmod a+r /etc/udev/rules.d/51-android.rules
  clear
  echo "OK, now the hardest part. Even that is not hard at all :)"
  echo "Press ENTER"
  read line
  echo '-----BEGIN PGP PUBLIC KEY BLOCK-----
    Version: GnuPG v1.4.2.2 (GNU/Linux)  
    mQGiBEnnWD4RBACt9/h4v9xnnGDou13y3dvOx6/t43LPPIxeJ8eX9WB+8LLuROSV
    lFhpHawsVAcFlmi7f7jdSRF+OvtZL9ShPKdLfwBJMNkU66/TZmPewS4m782ndtw7
    8tR1cXb197Ob8kOfQB3A9yk2XZ4ei4ZC3i6wVdqHLRxABdncwu5hOF9KXwCgkxMD
    u4PVgChaAJzTYJ1EG+UYBIUEAJmfearb0qRAN7dEoff0FeXsEaUA6U90sEoVks0Z
    wNj96SA8BL+a1OoEUUfpMhiHyLuQSftxisJxTh+2QclzDviDyaTrkANjdYY7p2cq
    /HMdOY7LJlHaqtXmZxXjjtw5Uc2QG8UY8aziU3IE9nTjSwCXeJnuyvoizl9/I1S5
    jU5SA/9WwIps4SC84ielIXiGWEqq6i6/sk4I9q1YemZF2XVVKnmI1F4iCMtNKsR4
    MGSa1gA8s4iQbsKNWPgp7M3a51JCVCu6l/8zTpA+uUGapw4tWCp4o0dpIvDPBEa9
    b/aF/ygcR8mh5hgUfpF9IpXdknOsbKCvM9lSSfRciETykZc4wrRCVGhlIEFuZHJv
    aWQgT3BlbiBTb3VyY2UgUHJvamVjdCA8aW5pdGlhbC1jb250cmlidXRpb25AYW5k
    cm9pZC5jb20+iGAEExECACAFAknnWD4CGwMGCwkIBwMCBBUCCAMEFgIDAQIeAQIX
    gAAKCRDorT+BmrEOeNr+AJ42Xy6tEW7r3KzrJxnRX8mij9z8tgCdFfQYiHpYngkI
    2t09Ed+9Bm4gmEO5Ag0ESedYRBAIAKVW1JcMBWvV/0Bo9WiByJ9WJ5swMN36/vAl
    QN4mWRhfzDOk/Rosdb0csAO/l8Kz0gKQPOfObtyYjvI8JMC3rmi+LIvSUT9806Up
    hisyEmmHv6U8gUb/xHLIanXGxwhYzjgeuAXVCsv+EvoPIHbY4L/KvP5x+oCJIDbk
    C2b1TvVk9PryzmE4BPIQL/NtgR1oLWm/uWR9zRUFtBnE411aMAN3qnAHBBMZzKMX
    LWBGWE0znfRrnczI5p49i2YZJAjyX1P2WzmScK49CV82dzLo71MnrF6fj+Udtb5+
    OgTg7Cow+8PRaTkJEW5Y2JIZpnRUq0CYxAmHYX79EMKHDSThf/8AAwUIAJPWsB/M
    pK+KMs/s3r6nJrnYLTfdZhtmQXimpoDMJg1zxmL8UfNUKiQZ6esoAWtDgpqt7Y7s
    KZ8laHRARonte394hidZzM5nb6hQvpPjt2OlPRsyqVxw4c/KsjADtAuKW9/d8phb
    N8bTyOJo856qg4oOEzKG9eeF7oaZTYBy33BTL0408sEBxiMior6b8LrZrAhkqDjA
    vUXRwm/fFKgpsOysxC6xi553CxBUCH2omNV6Ka1LNMwzSp9ILz8jEGqmUtkBszwo
    G1S8fXgE0Lq3cdDM/GJ4QXP/p6LiwNF99faDMTV3+2SAOGvytOX6KjKVzKOSsfJQ
    hN0DlsIw8hqJc0WISQQYEQIACQUCSedYRAIbDAAKCRDorT+BmrEOeCUOAJ9qmR0l
    EXzeoxcdoafxqf6gZlJZlACgkWF7wi2YLW3Oa+jv2QSTlrx4KLM=
    =Wi5D 
    -----END PGP PUBLIC KEY BLOCK-----' > ~/gpgimport
   gpg --import ~/gpgimport
   rm ~/gpgimport
  clear



  SplashScreen
  echo "And are you 32-bit or 64-bit?"
  echo "Options:"
  echo
  echo "1) 32-bit"
  echo "2) 64-bit"
  echo
  echo -n "Enter option: "
  read opt
sudo apt-get install git-core gnupg flex bison gperf build-essential \
zip curl zlib1g-dev libc6-dev tofrodos python-markdown \
libxml2-utils xsltproc x11proto-core-dev libgl1-mesa-dev libx11-dev
  if [ "$opt" = "1" ]
  then
   clear
   echo "This is gonna take a while..."
   echo "In the meanwhile, you could thank me or donate?"
   sleep 3
   sudo apt-get install libncurses5-dev \
 libreadline6-dev 
  fi
  if [ "$opt" = "2" ]
  then
   clear
   echo "This is gonna take a while..."
   echo "In the meanwhile, you could thank me or donate?"
   sleep 3
   sudo apt-get install lib32ncurses5-dev ia32-libs \
 lib32readline5-dev lib32z-dev \
 g++-multilib mingw32
  fi
  if [ "$FirstOption" = "1" ]
  then
   sudo apt-get install libx11-dev:i386
  fi
  if [ "$FirstOption" = "2" ]
  then
   sudo ln -s /usr/lib32/mesa/libGL.so.1 /usr/lib32/mesa/libGL.so
  fi
 fi
fi





done
}

if [ "$OSTYPE" = "cygwin" ]
then
	. $ScriptDir/Cygwin
fi

Menu
#
#Additional INFORMATION for the ones who are clever enough to read this:
#
# Nice that you take your time and efforts to read this. Do you have any
# Suggestions for adding to this TOOL? Remember, you may want to use some of these
# Scripts, but ask me first. And DONATING would be nice! ;)
# (c) 2012 mDroidd @XDA (r) All rights reserved
0.52
